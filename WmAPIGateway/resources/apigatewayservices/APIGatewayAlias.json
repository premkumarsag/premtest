{
  "swagger" : "2.0",
  "info" : {
    "description" : "API Gateway Alias Management Service allows you to manage aliases in the API Gateway. Any user with the 'Manage aliases' functional previlige can manage the aliases in API Gateway. By default, the users who are part of API-Gateway-Administrators group will have this privilege. \n\n An alias in API Gateway holds environment-specific property values that can be used in policy routing configurations. The aliases can be referred to in routing endpoints, routing rules, endpoint connection properties, outbound authentication tokens, and outbound HTTP headers instead of providing an actual value. The corresponding alias value is substituted in place of an alias name during run-time. Thus the same alias can be referred to in multiple policies and the change in a particular alias would affect all the policy properties in which it is being referred. \n\n There are six types of alias \n 1. Simple alias - Holds simple key property values \n 2. Endpoint alias - Holds the endpoint value along with additional properties such as connection timeout, read timeout, whether to pass security headers or not, keystore alias, key alias \n 3. HTTP Transport security alias - Contains the transport level security information required while accessing the native API. Used in the outbound policies \n 4. SOAP message security alias - Contains message level security information that is required to access the native API \n 5. webMethods Integration Server alias - Holds the ESB service value. Can be used in the Invoke webMethods IS policy for request and response processing.\n 6. Transformation alias - Holds a list of XSLT style sheets. Can be used in the XSLT Transformation policies for request and response processing.\n\n In addition to the above alias types, the configurations for Thirdparty OAuth provider, SAML Issuer and OpenId Provider are internally stored as aliases",
    "version" : "10.2",
    "title" : "API Gateway Alias Management Service"
  },
  "host" : "localhost:5555",
  "basePath" : "/rest/apigateway",
  "schemes" : [ "http" ],
  "consumes" : [ "plain/text" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/alias/{aliasId}" : {
      "get" : {
        "description" : "The method retrieves the details of an alias in API Gateway.",
        "operationId" : "getAlias",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "aliasId",
          "in" : "path",
          "description" : "The path parameter specifies the id of an alias whose details are to be retrieved.",
          "required" : true,
          "type" : "string",
          "x-example" : "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
        } ],
        "responses" : {
          "200" : {
            "description" : "This status code indicates that the details of the alias are successfully retrieved.",
            "schema" : {
              "$ref" : "#/definitions/Alias"
            },
            "examples" : {
              "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            }
          },
          "404" : {
            "description" : "This status code indicates that an alias with the given id could not be found in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n    \"errorDetails\": \" Alias with id: 732c4526-db9a-4ef9-9782-edda1a6aa9bc does not exist.\"\r\n}"
            }
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "put" : {
        "description" : "The method updates the details of a specified alias in API Gateway. The API request body must contain the payload for the updated alias.",
        "operationId" : "updateAlias",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "aliasId",
          "in" : "path",
          "description" : "The path parameter specifies the id of an alias whose detail is to be updated in API Gateway.",
          "required" : true,
          "type" : "string",
          "x-example" : "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "This parameter describes the request payload of an alias that is to be updated in API Gateway.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Alias"
          },
          "x-examples" : {
            "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "This status code indicates that the alias has been successfully updated in API Gateway, and the updated alias is available in the response body.",
            "schema" : {
              "$ref" : "#/definitions/Alias"
            },
            "examples" : {
              "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            }
          },
          "404" : {
            "description" : "This status code indicates that an alias with the specified id could not be found in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n    \"errorDetails\": \" Unable to process the PUT request for alias. Error occurred while processing the payload. Error Message:\\n Alias with id: 6a6ea325-4190-411b-8bbd-0a7e94dbc7d1 does not exist.\"\r\n}"
            }
          },
          "405" : {
            "description" : "This status code indicates that the specified HTTP method is not allowed for the requested alias in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n  \"errorDetails\": \" Unable to process the PUT request for alias. Error occurred while processing the payload. Error Message:\\n Method: PUT is not allowed on resource: alias\"\r\n}"
            }
          },
          "400" : {
            "description" : "This status code indicates that the request body is invalid."
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "delete" : {
        "description" : "The method deletes an alias from API Gateway.",
        "operationId" : "deleteAlias",
        "parameters" : [ {
          "name" : "aliasId",
          "in" : "path",
          "description" : "The path parameter specifies the id of an alias that is to be deleted from API Gateway.",
          "required" : true,
          "type" : "string",
          "x-example" : "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
        } ],
        "responses" : {
          "204" : {
            "description" : "This status code indicates that the specified alias has been successfully deleted from API Gateway."
          },
          "404" : {
            "description" : "This status code indicates that an alias with the given id could not be found in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n    \"errorDetails\": \" Alias with id: 732c4526-db9a-4ef9-9782-edda1a6aa9bc does not exist.\"\r\n}"
            }
          },
          "405" : {
            "description" : "This status code indicates that the specified HTTP method is not allowed for the requested alias in API Gateway."
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      }
    },
    "/alias" : {
      "get" : {
        "description" : "The method retrieves a list of all aliases in API Gateway.",
        "operationId" : "getAllAlias",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "This status code indicates that the list of aliases is successfully retrieved.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Alias"
              }
            },
            "examples" : {
              "application/json" : "{\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n\t\"endPointURI\": \"https://myDevstage:9090\",\r\n\t\"connectionTimeout\": \"23\",\r\n\t\"optimizationTechnique\": \"MTOM\",\r\n\t\"readTimeout\": \"36\",\r\n\t\"passSecurityHeaders\": true,\r\n\t\"keystoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"keyAlias\": \"ssos\",\r\n\t\"name\": \"MystageEndpoint\",\r\n\t\"description\": \"Endpoint alias for myDevstage.\",\r\n\t\"type\": \"endpoint\"\r\n},\r\n{\r\n\t\"id\": \"842c4526-db9a-4ef9-9782-edda1a6ab84c\"\r\n\t\"authType\": \"WSS_USERNAME\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"wssCredentials\": {\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"UsernameMessageAlias\",\r\n\t\"description\": \"WSS username message alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"652c4526-db8a-4ef9-9782-edda1a4gf9bc\"\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachineadfs20.sag.com\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"KerberosHttpTransportAlias\",\r\n\t\"description\": \"vmmachineadfs20 kerberos transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"422c4526-db9a-4ef9-9872-edda1a6aa9bc\"\r\n\t\"authType\": \"HTTP_BASIC\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"BasicHttpTransportAlias\",\r\n\t\"description\": \"Basic http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"732c4526-db9a-5t46-9782-edda1a4ac9bc\"\r\n\t\"authType\": \"NTLM\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"NTLMTransportAlias\",\r\n\t\"description\": \"ntlm http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"652c4526-db9a-4ef9-3265-edda1a6aa9bc\"\r\n\t\"authType\": \"OAUTH2\",\r\n\t\"oauth2Token\": \"T2F1dGgydG9rZW4=\",\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"OAuthTransportAlias\",\r\n\t\"description\": \"OAuth2 alias for outbound transport security\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"732c3265-db9a-4ef9-9782-edda1a6aa9bc\"\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"12c4526-db9a-5ef9-9845-edda1a7ba9bc\"\r\n\t\"authType\": \"SAML\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"\",\r\n\t\t\"keyAlias\": null,\r\n\t\t\"certificateAlias\": null,\r\n\t\t\"truststoreAlias\": \"\"\r\n\t},\r\n\t\"samlIssuerConfig\": \"${SAMLIssuer1}\",\r\n\t\"name\": \"SAMLAlias\",\r\n\t\"description\": \"SAML secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n}\r\n"
            }
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "post" : {
        "description" : "The method creates an alias in API Gateway. The API request body must contain the payload for the alias. Below are the request payloads for different types of aliases\r\nsimpleAlias : {\r\n\t\"value\": \"default value\",\r\n\t\"name\": \"DefaultAlias\",\r\n\t\"description\": \"Default Alias\",\r\n\t\"type\": \"simple\"\r\n},\r\nEndPointAlias : {\r\n\t\"endPointURI\": \"https://myDevstage:9090\",\r\n\t\"connectionTimeout\": \"23\",\r\n\t\"optimizationTechnique\": \"MTOM\",\r\n\t\"readTimeout\": \"36\",\r\n\t\"passSecurityHeaders\": true,\r\n\t\"keystoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"keyAlias\": \"ssos\",\r\n\t\"name\": \"MystageEndpoint\",\r\n\t\"description\": \"Endpoint alias for myDevstage.\",\r\n\t\"type\": \"endpoint\"\r\n},\r\nUsernameSoapMessageAlias: {\r\n\t\"authType\": \"WSS_USERNAME\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"wssCredentials\": {\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"UsernameMessageAlias\",\r\n\t\"description\": \"WSS username message alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\nKerberosHttpTransportAlias: {\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachineadfs20.sag.com\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"KerberosHttpTransportAlias\",\r\n\t\"description\": \"vmmachineadfs20 kerberos transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\nBasicHttpTransportAlias: {\r\n\t\"authType\": \"HTTP_BASIC\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"BasicHttpTransportAlias\",\r\n\t\"description\": \"Basic http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\nNTLMTransportAlias: {\r\n\t\"authType\": \"NTLM\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"NTLMTransportAlias\",\r\n\t\"description\": \"ntlm http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\nOAuthTransportAlias: {\r\n\t\"authType\": \"OAUTH2\",\r\n\t\"oauth2Token\": \"T2F1dGgydG9rZW4=\",\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"OAuthTransportAlias\",\r\n\t\"description\": \"OAuth2 alias for outbound transport security\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\nKerberosSoapMessageAlias: {\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\nSAMLSoapMessageAlias: {\r\n\t\"authType\": \"SAML\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"\",\r\n\t\t\"keyAlias\": null,\r\n\t\t\"certificateAlias\": null,\r\n\t\t\"truststoreAlias\": \"\"\r\n\t},\r\n\t\"samlIssuerConfig\": \"${SAMLIssuer1}\",\r\n\t\"name\": \"SAMLAlias\",\r\n\t\"description\": \"SAML secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n}",
        "operationId" : "createAlias",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Alias"
          },
          "x-examples" : {
            "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "This status code indicates that the alias has been successfully created in API Gateway, and the newly created alias is available in the response body.",
            "schema" : {
              "$ref" : "#/definitions/Alias"
            },
            "examples" : {
              "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            }
          },
          "400" : {
            "description" : "This status code indicates that an alias with the given name already exists in API Gateway or the request body is not correct.",
            "examples" : {
              "application/json" : "{}"
            }
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "Basic" : {
      "description" : "API Gateway Administrator",
      "type" : "basic"
    }
  },
  "definitions" : {
    "Alias" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "aliasId" : {
          "type" : "string",
          "description" : "A unique ID for the alias",
          "readOnly" : true
        },
        "aliasName" : {
          "type" : "string",
          "description" : "A unique name for the assertion"
        },
        "aliasDescription" : {
          "type" : "string",
          "description" : "A description about the alias"
        }
      }
    },
    "AuthInfo" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "BasicAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ClientMetadataMapping" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "providerName" : {
            "type" : "string"
          },
          "implNames" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "extendedValues" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "scopeManagementESBService" : {
            "type" : "string"
          }
        }
      } ]
    },
    "Credentials" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string",
          "description" : "Specify a username to access the native API"
        },
        "password" : {
          "type" : "string",
          "description" : "Specify a password to access the native API"
        },
        "domain" : {
          "type" : "string",
          "description" : "Specify a domain to access the native API"
        }
      }
    },
    "EndpointAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "endPointURI" : {
            "type" : "string",
            "description" : "the default URI or components of the URI such as service name"
          },
          "ConnectionTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "time interval (in seconds) after which a connection attempt times out"
          },
          "readTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "time interval (in seconds) after which a socket read attempt times out"
          },
          "optimizationTechnique" : {
            "type" : "string",
            "description" : "Type of optimization technique used for SOAP messages",
            "enum" : [ "NONE", "MTOM", "SWA" ]
          },
          "passSecurityHeaders" : {
            "type" : "boolean",
            "description" : "Boolean value whether to pass security headers or not"
          },
          "keystoreAlias" : {
            "type" : "string",
            "description" : "Keystore alias name that is used for the signing/encryption"
          },
          "keyAlias" : {
            "type" : "string",
            "description" : "Key alias in the particular keyStore"
          }
        }
      } ]
    },
    "HTTPTransportSecurityAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authType" : {
            "type" : "string",
            "description" : "type of authentication you want to use while communicating with the native API",
            "enum" : [ "HTTP_BASIC", "NTLM", "OAUTH2", "KERBEROS", "JWT", "ALIAS", "REMOVE_INCOMING_HTTP_HEADERS" ]
          },
          "authMode" : {
            "type" : "string",
            "description" : "Mode of authentication that needs to be used",
            "enum" : [ "NEW", "INCOMING_HTTP_BASIC_AUTH", "INCOMING_WSS_USER", "INCOMING_X509", "DELEGATE_INCOMING", "INCOMING_OAUTH_TOKEN", "INCOMING_JWT", "TRANSPARENT" ]
          },
          "httpAuthCredentials" : {
            "description" : "Credentials that are used for HTTP authentication",
            "$ref" : "#/definitions/Credentials"
          },
          "kerberosCredentials" : {
            "description" : "Credentials that are  used for Kerberos authentication",
            "$ref" : "#/definitions/KerberosCredentials"
          },
          "oauth2Token" : {
            "type" : "string",
            "description" : "OAuth2 token that is used for authentication"
          }
        }
      } ]
    },
    "KerberosCredentials" : {
      "type" : "object",
      "properties" : {
        "clientPrincipal" : {
          "type" : "string",
          "description" : "a unique identity to which Kerberos can assign tickets"
        },
        "clientPassword" : {
          "type" : "string",
          "description" : "password for the client principal"
        },
        "servicePrincipal" : {
          "type" : "string",
          "description" : "a unique identifier of a service instance"
        },
        "servicePrincipalNameForm" : {
          "type" : "string",
          "description" : "the format in which you want to specify the principal name of the service that is registered with the principal database",
          "enum" : [ "HOST_BASED", "USERNAME_BASED" ]
        },
        "requestDelegateToken" : {
          "type" : "boolean",
          "description" : "Boolean value whether the token needs to be delegated or not"
        }
      }
    },
    "Metadata" : {
      "type" : "object",
      "properties" : {
        "authorizeURL" : {
          "type" : "string"
        },
        "accessTokenURL" : {
          "type" : "string"
        },
        "refreshTokenURL" : {
          "type" : "string"
        }
      }
    },
    "OAuth2Endpoint" : {
      "type" : "object",
      "properties" : {
        "endpoint" : {
          "type" : "string"
        },
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "https" : {
          "type" : "boolean"
        }
      }
    },
    "OAuth2Endpoints" : {
      "type" : "object",
      "properties" : {
        "endpoints" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/OAuth2Endpoint"
          }
        },
        "keyStoreAlias" : {
          "type" : "string"
        },
        "keyAlias" : {
          "type" : "string"
        }
      }
    },
    "OpenIDProviderAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "issuer" : {
            "type" : "string"
          },
          "authorizationEndpoint" : {
            "type" : "string"
          },
          "tokenEndpoint" : {
            "type" : "string"
          },
          "userinfoEndpoint" : {
            "type" : "string"
          },
          "jwksUri" : {
            "type" : "string"
          },
          "openIDScopes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "openIDResponseType" : {
            "type" : "string",
            "enum" : [ "code", "id_token", "token_id_token", "id_token_token" ]
          },
          "clientId" : {
            "type" : "string"
          },
          "clientSecret" : {
            "type" : "string"
          },
          "prompt" : {
            "type" : "string",
            "enum" : [ "none", "login", "consent", "select_account" ]
          },
          "openIDGrantType" : {
            "type" : "string",
            "enum" : [ "authorization_code" ]
          },
          "openIDDisplayValue" : {
            "type" : "string",
            "enum" : [ "none", "page", "popup", "touch", "wap" ]
          },
          "openIDTokenEndpointAuthMode" : {
            "type" : "string",
            "enum" : [ "client_secret_basic", "client_secret_post", "none" ]
          },
          "maxAge" : {
            "type" : "string"
          },
          "redirectionEndpointHost" : {
            "type" : "string"
          },
          "redirectionEndpointPort" : {
            "type" : "string"
          },
          "uiLocales" : {
            "type" : "string"
          },
          "includeUserinfoClaims" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "SAMLIssuerAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "issuerCommunicationMode" : {
            "type" : "string",
            "description" : "Mode of communication to the STS",
            "enum" : [ "NORMAL_CLIENT", "ACT_AS_DELEGATION" ]
          },
          "issuerPolicy" : {
            "type" : "string",
            "description" : "The webMethods Integration Server service name"
          },
          "issuerAuthScheme" : {
            "type" : "string",
            "description" : "The authentication type used for communicating to STS",
            "enum" : [ "BASIC_AUTH", "WSS_USERNAME", "KERBEROS", "X509" ]
          },
          "issuerAuthMode" : {
            "type" : "string",
            "description" : "Mode of communication",
            "enum" : [ "NEW", "INCOMING_HTTP_BASIC_AUTH", "INCOMING_WSS_USER", "INCOMING_X509", "DELEGATE_INCOMING", "INCOMING_OAUTH_TOKEN", "INCOMING_JWT", "TRANSPARENT" ]
          },
          "wssCredentials" : {
            "description" : "Credentials required for the WSS Username token",
            "$ref" : "#/definitions/WssCredentials"
          },
          "kerberosCredentials" : {
            "description" : "Credentials for the kerberos token",
            "$ref" : "#/definitions/KerberosCredentials"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "The endpoint URI of the STS"
          },
          "samlVersion" : {
            "type" : "string",
            "description" : "SAML version to be used for authentication",
            "enum" : [ "SAML1_1", "SAML_2_0" ]
          },
          "wsTrustVersion" : {
            "type" : "string",
            "description" : "WS-Trust version that API Gateway must use to send the RST to the SAML issuer",
            "enum" : [ "WS_TRUST_1_0", "WS_TRUST_1_3" ]
          },
          "appliesTo" : {
            "type" : "string",
            "description" : "Specify the scope for which this security token is required"
          },
          "extendedParameters" : {
            "type" : "object",
            "description" : "Extensions to the <wst:RequestSecurityToken> element for requesting specific types of keys, algorithms, or key and algorithms, as specified by a given policy in the return token(s)",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "signAndEncryptConfig" : {
            "description" : "Private and public keys used for signature and encryption",
            "$ref" : "#/definitions/SignAndEncryptConfig"
          }
        }
      } ]
    },
    "SOAPMessageSecurityAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authType" : {
            "type" : "string",
            "description" : "Type of authentication that needs to be used",
            "enum" : [ "WSS_USERNAME", "SAML", "KERBEROS", "ALIAS", "REMOVE_WSS_HEADERS", "NONE" ]
          },
          "authMode" : {
            "type" : "string",
            "description" : "Mode of authentication",
            "enum" : [ "NEW", "INCOMING_HTTP_BASIC_AUTH", "INCOMING_WSS_USER", "INCOMING_X509", "DELEGATE_INCOMING", "INCOMING_OAUTH_TOKEN", "INCOMING_JWT", "TRANSPARENT" ]
          },
          "wssCredentials" : {
            "description" : "Credentials required for the WSS Username token",
            "$ref" : "#/definitions/WssCredentials"
          },
          "kerberosCredentials" : {
            "description" : "Credentials for the kerberos token",
            "$ref" : "#/definitions/KerberosCredentials"
          },
          "samlIssuerConfig" : {
            "type" : "string",
            "description" : "Saml issuer configuration name"
          },
          "signAndEncryptConfig" : {
            "description" : "private and public keys used for signature and encryption",
            "$ref" : "#/definitions/SignAndEncryptConfig"
          }
        }
      } ]
    },
    "SignAndEncryptConfig" : {
      "type" : "object",
      "properties" : {
        "keyStoreAlias" : {
          "type" : "string",
          "description" : "Select the certificate from the truststore that is used to encrypt the request that is sent to the native API."
        },
        "keyAlias" : {
          "type" : "string",
          "description" : "The key alias is the private key that is used sign the request sent to the native API"
        }
      }
    },
    "SimpleAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "DefaultValue" : {
            "type" : "string",
            "description" : "value of the simple alias"
          }
        }
      } ]
    },
    "ThirdPartyOAuth2Alias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "providerName" : {
            "type" : "string"
          },
          "endpointDetails" : {
            "$ref" : "#/definitions/OAuth2Endpoints"
          },
          "authInfo" : {
            "$ref" : "#/definitions/AuthInfo"
          },
          "metadata" : {
            "$ref" : "#/definitions/Metadata"
          }
        }
      } ]
    },
    "TokenAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object",
        "properties" : {
          "tokenType" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TransformationAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "DefaultValue" : {
            "type" : "string",
            "description" : "content of the file"
          }
        }
      } ]
    },
    "WebmethodsAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "DefaultValue" : {
            "type" : "string",
            "description" : "the webMethods Integration Server service name"
          }
        }
      } ]
    },
    "WssCredentials" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string",
          "description" : "a username used to generate the WSS username token"
        },
        "password" : {
          "type" : "string",
          "description" : "password for the username"
        },
        "passwordType" : {
          "type" : "string",
          "description" : "type of password",
          "enum" : [ "NONE", "TEXT", "DIGEST" ]
        }
      }
    }
  }
}